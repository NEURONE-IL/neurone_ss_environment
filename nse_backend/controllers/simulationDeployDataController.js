require('dotenv').config({ path: 'settings.env' });

const BookmarkSchema = require("../models/SimulationDeployData/Bookmark");
const KeystrokeSchema = require("../models/SimulationDeployData/Keystroke");
const QuerySchema = require("../models/SimulationDeployData/Query");
const VisitedlinkSchema = require("../models/SimulationDeployData/Visitedlink");

var Mutex = require("async-mutex").Mutex;
const mutex_lastDataRequestDate = new Mutex();

// Initializes the controller methods of the simulation deploy data
async function initializeSimulationDeployDataController() {

	const connections = await require("../config/db");
	const SimulationDeploy = await require("../models/SimulationDeploy");

	let simulationDeployDataController = [];

	// Gets the latest bookmark data generated by a deployed simulation (using a timestamp value as a cursor to know which data to skip), and updates the date of last data request in the respective simulation deploy entry in the database
	simulationDeployDataController.getLatestBookmarks = exports.getLatestBookmarks = async (req, res) => {

		try {

			const deployName = req.params.deployName;

			mutex_lastDataRequestDate

				.runExclusive(async function() {

					let simulationDeploy = await SimulationDeploy.find({ deployName: deployName });
					if (simulationDeploy.length == 0) {
						return;
					}
					simulationDeploy = simulationDeploy[0];
					let newLastDataRequestDate = (new Date(Date.now())).getTime();
					if (newLastDataRequestDate > simulationDeploy.lastDataRequestDate.getTime()) {
						simulationDeploy.lastDataRequestDate = newLastDataRequestDate;
						await SimulationDeploy.findOneAndUpdate({ _id: simulationDeploy._id }, simulationDeploy, { new: true });
					}

				});

			const neuroneSimAppConn = connections.DB_MONGO_SIM_APP_DATA;
			const neuroneSimAppDB = neuroneSimAppConn.useDb(deployName);
			const Bookmark = neuroneSimAppDB.model("Bookmark", BookmarkSchema);
			const bookmarks = await Bookmark.find(
				{ localTimestamp: { $gte: req.params.cursor } }
			).sort( { localTimestamp: 1 } );
			res.json(bookmarks);

		} catch (error) {

			console.log(error);
			res.status(500).send("Error: getLatestBookmarks method failed");

		}

	}

	// Gets the latest keystroke data generated by a deployed simulation (using a timestamp value as a cursor to know which data to skip), and updates the date of last data request in the respective simulation deploy entry in the database
	simulationDeployDataController.getLatestKeystrokes = exports.getLatestKeystrokes = async (req, res) => {

		try {

			const deployName = req.params.deployName;

			mutex_lastDataRequestDate

				.runExclusive(async function() {

					let simulationDeploy = await SimulationDeploy.find({ deployName: deployName });
					if (simulationDeploy.length == 0) {
						return;
					}
					simulationDeploy = simulationDeploy[0];
					let newLastDataRequestDate = (new Date(Date.now())).getTime();
					if (newLastDataRequestDate > simulationDeploy.lastDataRequestDate.getTime()) {
						simulationDeploy.lastDataRequestDate = newLastDataRequestDate;
						await SimulationDeploy.findOneAndUpdate({ _id: simulationDeploy._id }, simulationDeploy, { new: true });
					}

				});

			const neuroneSimAppConn = connections.DB_MONGO_SIM_APP_DATA;
			const neuroneSimAppDB = neuroneSimAppConn.useDb(deployName);
			const Keystroke = neuroneSimAppDB.model("Keystroke", KeystrokeSchema);
			const keystrokes = await Keystroke.find(
				{ localTimestamp: { $gte: req.params.cursor } }
			).sort( { localTimestamp: 1 } );
			res.json(keystrokes);

		} catch (error) {

			console.log(error);
			res.status(500).send("Error: getLatestKeystrokes method failed");

		}

	}

	// Gets the latest query data generated by a deployed simulation (using a timestamp value as a cursor to know which data to skip), and updates the date of last data request in the respective simulation deploy entry in the database
	simulationDeployDataController.getLatestQueries = exports.getLatestQueries = async (req, res) => {

		try {

			const deployName = req.params.deployName;

			mutex_lastDataRequestDate

				.runExclusive(async function() {

					let simulationDeploy = await SimulationDeploy.find({ deployName: deployName });
					if (simulationDeploy.length == 0) {
						return;
					}
					simulationDeploy = simulationDeploy[0];
					let newLastDataRequestDate = (new Date(Date.now())).getTime();
					if (newLastDataRequestDate > simulationDeploy.lastDataRequestDate.getTime()) {
						simulationDeploy.lastDataRequestDate = newLastDataRequestDate;
						await SimulationDeploy.findOneAndUpdate({ _id: simulationDeploy._id }, simulationDeploy, { new: true });
					}

				});
			
			const neuroneSimAppConn = connections.DB_MONGO_SIM_APP_DATA;
			const neuroneSimAppDB = neuroneSimAppConn.useDb(deployName);
			const Query = neuroneSimAppDB.model("Query", QuerySchema);
			const queries = await Query.find(
				{ localTimestamp: { $gte: req.params.cursor } }
			).sort( { localTimestamp: 1 } );
			res.json(queries);

		} catch (error) {

			console.log(error);
			res.status(500).send("Error: getLatestQueries method failed");

		}

	}

	// Gets the latest visited links data generated by a deployed simulation (using a timestamp value as a cursor to know which data to skip), and updates the date of last data request in the respective simulation deploy entry in the database
	simulationDeployDataController.getLatestVisitedlinks = exports.getLatestVisitedlinks = async (req, res) => {

		try {

			const deployName = req.params.deployName;

			mutex_lastDataRequestDate

				.runExclusive(async function() {

					let simulationDeploy = await SimulationDeploy.find({ deployName: deployName });
					if (simulationDeploy.length == 0) {
						return;
					}
					simulationDeploy = simulationDeploy[0];
					let newLastDataRequestDate = (new Date(Date.now())).getTime();
					if (newLastDataRequestDate > simulationDeploy.lastDataRequestDate.getTime()) {
						simulationDeploy.lastDataRequestDate = newLastDataRequestDate;
						await SimulationDeploy.findOneAndUpdate({ _id: simulationDeploy._id }, simulationDeploy, { new: true });
					}

				});
			
			const neuroneSimAppConn = connections.DB_MONGO_SIM_APP_DATA;
			const neuroneSimAppDB = neuroneSimAppConn.useDb(deployName);
			const Visitedlink = neuroneSimAppDB.model("Visitedlink", VisitedlinkSchema);
			const visitedlinks = await Visitedlink.find(
				{ localTimestamp: { $gte: req.params.cursor } }
			).sort( { localTimestamp: 1 } );
			res.json(visitedlinks);

		} catch (error) {

			console.log(error);
			res.status(500).send("Error: getLatestVisitedlinks method failed");

		}

	}

	return simulationDeployDataController;

}

module.exports = initializeSimulationDeployDataController();